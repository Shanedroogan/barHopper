from datetime import datetime
from app import app, db
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from app import login
from hashlib import md5
from time import time
import jwt

#password generation, storage, and recovery based on Miguel Grinberg's flask implementation
class User(UserMixin, db.Model):
    __table_args__ = {'extend_existing': True} #extend_existing allows interaction with already existing db
    id = db.Column(db.Integer, primary_key = True)
    username = db.Column(db.String(64), index = True, unique = True)
    email = db.Column(db.String(120), index = True, unique = True)
    password_hash = db.Column(db.String(128))
    crawls = db.relationship('Crawl', backref='author', lazy = 'dynamic')

    def __repr__(self):
        return f'<User {self.username}>'

    def set_password(self, password):
        """Stores password hash generated by werkzeug.security"""
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """Secure check hash function provided by werkzeug.security"""
        return check_password_hash(self.password_hash, password)

    def get_reset_password_token(self, expires_in=600):
        """Unique reset token generated for user, with 10 minute expiration"""
        return jwt.encode(
        {'reset_password' : self.id, 'exp' : time() + expires_in},
        app.config['SECRET_KEY'], algorithm="HS256").decode('utf-8')

    @staticmethod
    def verify_reset_password_token(token):
        try:
            id = jwt.decode(token, app.config['SECRET_KEY'],
                                algorithms=['HS256'])['reset_password']
        except:
            return
        return User.query.get(id)


class Bar_MasterList(db.Model):
    """Inherit Bar_MasterList table from db"""
    __table__ = db.Model.metadata.tables['Bar_MasterList']
    __table_args__ = {'extend_existing': True}
    deals = db.relationship('Deal', backref='bar', lazy='dynamic')

    def __repr__(self):
        return f'<Bar {self.name}>'


class Crawl(db.Model):
    """
        Crawl entry represents a barhop
        Stores information to query bars, date created, route information (encoded polyline), and an identifying name
    """
    __table_args__ = {'extend_existing' : True}
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(140))
    date = db.Column(db.DateTime)
    bar_list = db.Column(db.String(140))
    polyline_string = db.Column(db.String(255))
    timestamp = db.Column(db.DateTime, index = True, default = datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return f'<Crawl {self.id}, {self.user_id}>'


class Deal(db.Model):
    """Inherit existing Deal table mapping scraped deals to bars on the master list"""
    __table__ = db.Model.metadata.tables['Deal']
    __table_args__ = {'extend_existing' : True}

    def __repr__(self):
        return f'<Deal {self.deal_name}>'


@login.user_loader
def load_user(id):
    return User.query.get(int(id))
